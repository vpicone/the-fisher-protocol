/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Man: THREE.SkinnedMesh
    bones: THREE.Bone
  }
  materials: {
    man: THREE.MeshStandardMaterial
  }
}

type ActionName =
  | 'Rig|Rig|_unity_humanoid_setup|Rig|_unity_humanoid_setup'
  | 'Key|Rig|_unity_humanoid_setup|Rig|_unity_humanoid_setup'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF(
    '/volunteer-transformed.glb'
  ) as GLTFResult

  console.log(nodes)
  const { actions, ref } = useAnimations<GLTFActions>(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.bones} />
      <hemisphereLight position={[0, 0, 10]} />
      <skinnedMesh
        ref={ref}
        castShadow={true}
        name='Man'
        geometry={nodes.Man.geometry}
        material={materials.man}
        skeleton={nodes.Man.skeleton}
        morphTargetDictionary={nodes.Man.morphTargetDictionary}
        morphTargetInfluences={nodes.Man.morphTargetInfluences}
      />
    </group>
  )
}

useGLTF.preload('/volunteer-transformed.glb')
